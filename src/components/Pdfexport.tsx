import React, { useState } from 'react';
import { jsPDF } from 'jspdf';
import autoTable from 'jspdf-autotable';
import { Download } from 'lucide-react';
import { OptimizationResult, OptimizationSummary } from '../types/types';

interface PdfexportProps {
  summary: OptimizationSummary;
  results: OptimizationResult[];
}

const Pdfexport: React.FC<PdfexportProps> = ({ summary, results }) => {
  const [numSheets] = useState(summary.totalSheets || 0);
  const [numPlates] = useState(summary.totalPlates);

  const exportToPdf = () => {
    if (!summary || !results || results.length === 0) {
      return;
    }
  
    const doc = new jsPDF();
  
    // Header - Company name
    doc.setFontSize(16);
    doc.setFont('helvetica', 'bold');
    doc.text('HORIZON SOURCING', 105, 15, { align: 'center' });
  
    // Right aligned date
    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');
    doc.text(`Date: ${new Date().toLocaleDateString()}`, 200, 10, { align: 'right' });
  
    // Subtitle
    doc.setFontSize(12);
    doc.setFont('helvetica', 'bold');
    doc.text('UPS OPTIMIZATION REPORT', 105, 25, { align: 'center' });
  
    // Summary section
    const compactSummaryData = [
      ['No. of UPS', summary.upsCapacity.toString(), 'Total Sheets', numSheets.toString()],
      ['Total Plates', numPlates.toString(), 'Required Order Qty', summary.totalItems.toString()],
      ['Qty Produced', summary.totalProduced.toString(), 'Excess Qty', summary.totalExcess.toString()],
      ['Excess %', `${summary.wastePercentage}%`, 'Total Cost', `$${summary.totalCost.toFixed(2)}`],
    ];
  
    autoTable(doc, {
      startY: 35,
      head: [['Metric', 'Value', 'Metric', 'Value']],
      body: compactSummaryData,
      theme: 'grid',
      headStyles: { fillColor: [220, 220, 220], textColor: 0 },
      styles: { fontSize: 10, textColor: 0 },
    });
  
    // Sort results by PLATE
    const sortedResults = [...results].sort((a, b) => a.PLATE.localeCompare(b.PLATE));
  
    // Data table
    autoTable(doc, {
      // startY: doc.lastAutoTable.finalY + 10,
      head: [['Color', 'Size', 'Required Qty', 'Plate', 'UPS', 'Sheets', 'Qty Produced', 'Excess Qty']],
      body: sortedResults.map((r, i) => {
        const isNewPlate = i === 0 || r.PLATE !== sortedResults[i - 1].PLATE;
        return [
          r.COLOR,
          r.SIZE,
          r.QTY.toString(),
          r.PLATE,
          r.OPTIMAL_UPS.toString(),
          isNewPlate ? r.SHEETS_NEEDED.toString() : '',
          r.QTY_PRODUCED.toString(),
          r.EXCESS.toString(),
        ];
      }),
      theme: 'striped',
      headStyles: { fillColor: [220, 220, 220], textColor: 0 },
      styles: { fontSize: 9, textColor: 0 },
      columnStyles: {
        0: { cellWidth: 30 },
        1: { cellWidth: 20 },
        2: { cellWidth: 20 },
        3: { cellWidth: 20 },
        4: { cellWidth: 20 },
        5: { cellWidth: 20 },
        6: { cellWidth: 25 },
        7: { cellWidth: 20 },
      },
    });
  
    // Summary line at the bottom
    const totalQtyProduced = results.reduce((sum, r) => sum + r.QTY_PRODUCED, 0);
    const totalExcess = results.reduce((sum, r) => sum + r.EXCESS, 0);
  
    const summaryLine = [
      'Total Summary',
      '',
      summary.totalItems.toString(),
      numPlates.toString(),
      summary.upsCapacity.toString(),
      numSheets.toString(),
      totalQtyProduced.toString(),
      totalExcess.toString(),
    ];
  
    autoTable(doc, {
      body: [summaryLine],
      theme: 'grid',
      styles: { fontStyle: 'bold', textColor: 0 },
      columnStyles: {
        0: { cellWidth: 30 },
        1: { cellWidth: 20 },
        2: { cellWidth: 20 },
        3: { cellWidth: 20 },
        4: { cellWidth: 20 },
        5: { cellWidth: 20 },
        6: { cellWidth: 25 },
        7: { cellWidth: 20 },
      },
      // startY: doc.lastAutoTable.finalY + 5,
    });
  
    // Footer - Generated by & page number
    const pageCount = doc.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i);
      doc.setFontSize(8);
      doc.text('Generated by Horizon Sourcing', 10, 290);
      doc.text(`Page ${i} of ${pageCount}`, 200, 290, { align: 'right' });
    }
  
    doc.save('UPS_Optimization_Results.pdf');
  };
  return (
    <button
      onClick={exportToPdf}
      className="flex items-center px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
    >
      <Download className="w-4 h-4 mr-2" />
      Export to PDF
    </button>
  );
}
export default Pdfexport;  